import { createContext, useContext, useState, useEffect } from 'react';

const MOCK_USERS = [
  {
    id: 'user_001',
    login: 'admin',
    password: '123',
    role: 'responsible',
    house: 'Korabelnaya_1',
    fullName: 'Admin User'
  },
  {
    id: 'user_002',
    login: 'user1',
    password: '123',
    role: 'participant',
    house: 'Korabelnaya_3',
    fullName: 'Test User 1'
  }
];

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const savedUser = localStorage.getItem('vg_current_user');
    if (savedUser) {
      try {
        setUser(JSON.parse(savedUser));
      } catch (error) {
        localStorage.removeItem('vg_current_user');
      }
    }
    setIsLoading(false);
  }, []);

  const login = (loginValue, password) => {
    const foundUser = MOCK_USERS.find(
      u => u.login === loginValue && u.password === password
    );

    if (foundUser) {
      const userWithoutPassword = {
        id: foundUser.id,
        login: foundUser.login,
        role: foundUser.role,
        house: foundUser.house,
        fullName: foundUser.fullName
      };

      setUser(userWithoutPassword);
      localStorage.setItem('vg_current_user', JSON.stringify(userWithoutPassword));
      return { success: true };
    } else {
      return { success: false, error: 'Invalid credentials' };
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('vg_current_user');
  };

  const isResponsible = () => user?.role === 'responsible';
  const isAuthenticated = () => !!user;

  const value = {
    user,
    isLoading,
    login,
    logout,
    isResponsible,
    isAuthenticated
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
}