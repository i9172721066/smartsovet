import { useEffect, useState } from "react";
import { useAuth, useRepository } from "../lib/repo/context.jsx";
import toast from 'react-hot-toast';

export default function Vote() {
  const [polls, setPolls] = useState([]);
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();
  const { repository, backend } = useRepository();

  useEffect(() => {
    loadPolls();
  }, []);

  const loadPolls = async () => {
    try {
      setLoading(true);
      
      if (backend === 'local') {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–∑ localStorage
        const createdPolls = JSON.parse(localStorage.getItem('vg_created_polls') || '[]');
        
        console.log('üìä –í–°–ï–ì–û –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –≤ localStorage:', createdPolls.length);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'voting' 
        const activePolls = createdPolls.filter(poll => poll.status === 'voting');
        
        console.log('‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "voting":', activePolls.length);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const pollsWithOptions = activePolls.map(poll => ({
          ...poll,
          options: poll.options || [
            { id: 1, text: "–î–ê" },
            { id: 2, text: "–ù–ï–¢" },
            { id: 3, text: "–í–û–ó–î–ï–†–ñ–ê–õ–°–Ø" }
          ]
        }));
        
        setPolls(pollsWithOptions);
        
        console.log('üìã –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', pollsWithOptions.map(p => p.title));
      } else {
        // Supabase –¥–∞–Ω–Ω—ã–µ
        const data = await repository.listPolls('active');
        setPolls(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ä–æ—Å–æ–≤:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ä–æ—Å–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  const handleVote = async (pollId, optionId, isInitiator = false) => {
    try {
      if (backend === 'local') {
        const votesKey = `poll_${pollId}_votes`;
        const userVotesKey = `poll_${pollId}_user_votes`;
        
        const userVotes = JSON.parse(localStorage.getItem(userVotesKey) || '{}');
        const votes = JSON.parse(localStorage.getItem(votesKey) || '{}');
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
        if (userVotes[user.username || user.login]) {
          toast.error('–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ');
          return;
        }
        
        // –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å
        userVotes[user.username || user.login] = optionId;
        votes[optionId] = (votes[optionId] || 0) + 1;
        
        localStorage.setItem(userVotesKey, JSON.stringify(userVotes));
        localStorage.setItem(votesKey, JSON.stringify(votes));
        
        toast.success('–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: ' + error.message);
    }
  };

  const checkUserVoted = (pollId) => {
    if (backend === 'local') {
      const userVotesKey = `poll_${pollId}_user_votes`;
      const userVotes = JSON.parse(localStorage.getItem(userVotesKey) || '{}');
      return userVotes[user.username || user.login] || null;
    }
    return null;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">–ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</h1>
          <p className="text-gray-600">–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞</p>
        </div>
        <button
          onClick={loadPolls}
          className="px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {polls.length === 0 ? (
        <div className="text-center py-12 border-2 border-dashed border-gray-300 rounded-lg">
          <h3 className="text-lg font-medium text-gray-900 mb-2">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π</h3>
          <p className="text-gray-500">
            –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
          </p>
        </div>
      ) : (
        <div className="space-y-6">
          {polls.map((poll) => (
            <PollCard 
              key={poll.id} 
              poll={poll} 
              onVote={handleVote}
              userVoted={checkUserVoted(poll.id)}
              user={user}
            />
          ))}
        </div>
      )}
    </div>
  );
}

function PollCard({ poll, onVote, userVoted, user }) {
  const [selectedOption, setSelectedOption] = useState('');
  const [isInitiator, setIsInitiator] = useState(false);

  const hasVoted = !!userVoted;

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!selectedOption) return;
    
    const optionId = parseInt(selectedOption);
    onVote(poll.id, optionId, isInitiator);
  };

  const getStatusBadge = () => (
    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
      –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    </span>
  );

  return (
    <div className="bg-white shadow rounded-lg border border-gray-200 p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
      <div className="flex justify-between items-start mb-4">
        <h3 className="text-lg font-semibold text-gray-900">{poll.title}</h3>
        {getStatusBadge()}
      </div>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
      <p className="text-gray-600 mb-4">{poll.description}</p>

      {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
      <div className="text-sm text-gray-500 mb-4 space-y-1">
        <div>
          <span className="font-medium">–£—á–∞—Å—Ç–Ω–∏–∫–∏:</span> {poll.participants?.join(", ") || "‚Äî"}
        </div>
        {poll.endAt && (
          <div>
            <span className="font-medium">–û–∫–æ–Ω—á–∞–Ω–∏–µ:</span> {new Date(poll.endAt).toLocaleString("ru-RU")}
          </div>
        )}
        {poll.requiresFinancing && (
          <div className="text-amber-600">
            üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
          </div>
        )}
        {poll.requiresInitiator && (
          <div className="text-purple-600">
            üë§ –¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
          </div>
        )}
      </div>

      {/* –§–æ—Ä–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
      {hasVoted ? (
        <div className="bg-green-50 rounded-md p-4 text-green-800">
          –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ
        </div>
      ) : (
        <form onSubmit={handleSubmit} className="space-y-4">
          {/* –í–∞—Ä–∏–∞–Ω—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è */}
          <div>
            <label className="text-base font-medium text-gray-900 block mb-3">
              –í–∞—à –≥–æ–ª–æ—Å:
            </label>
            <div className="space-y-2">
              {poll.options?.map((option) => (
                <label key={option.id} className="flex items-center">
                  <input
                    type="radio"
                    name={`vote_${poll.id}`}
                    value={option.id}
                    onChange={(e) => setSelectedOption(e.target.value)}
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300"
                  />
                  <span className="ml-3 text-sm text-gray-700">
                    {option.text === '–î–ê' && '‚úÖ'} 
                    {option.text === '–ù–ï–¢' && '‚ùå'} 
                    {option.text === '–í–û–ó–î–ï–†–ñ–ê–õ–°–Ø' && '‚ö™'} 
                    {option.text}
                  </span>
                </label>
              ))}
            </div>
          </div>

          {/* –í–æ–ø—Ä–æ—Å –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—Å—Ç–≤–µ */}
          {poll.requiresInitiator && (
            <div>
              <label className="text-base font-medium text-gray-900 block mb-3">
                –ì–æ—Ç–æ–≤—ã –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º?
              </label>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name={`initiator_${poll.id}`}
                    value="yes"
                    onChange={() => setIsInitiator(true)}
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300"
                  />
                  <span className="ml-2 text-sm text-gray-700">üëç –î–ê</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name={`initiator_${poll.id}`}
                    value="no"
                    onChange={() => setIsInitiator(false)}
                    defaultChecked
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300"
                  />
                  <span className="ml-2 text-sm text-gray-700">üëé –ù–ï–¢</span>
                </label>
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è */}
          <button
            type="submit"
            disabled={!selectedOption}
            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
          </button>
        </form>
      )}
    </div>
  );
}